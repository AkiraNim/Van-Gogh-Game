extends Node
class_name DialogCameraService

signal dialogo_finalizado # Emitido quando o zoom de sa√≠da termina.

@export var camera: Camera3D

## NOVO: Alvo para a c√¢mera seguir durante o gameplay.
@export var gameplay_target: Node3D
@export var gameplay_follow_speed: float = 5.0

# N√≠veis de zoom
@export var zoom_padrao: float = 5.0
@export var zoom_inicial: float = 3.0
@export var zoom_final: float = 2.5

# Configura√ß√µes de Anima√ß√£o
@export var duracao_zoom_in: float = 0.8
@export var duracao_zoom_out: float = 0.5
@export var velocidade_foco: float = 0.5
## ALTERADO: O Offset agora controla a dist√¢ncia (Z) tamb√©m.
## X: Deslocamento lateral | Y: Altura | Z: Dist√¢ncia
@export var offset_camera: Vector3 = Vector3(0, 4, 6)

var camera_tween: Tween
## NOVO: Uma "chave" para saber se estamos em di√°logo.
var is_in_dialogue: bool = false


func _ready() -> void:
	if camera:
		camera.size = zoom_padrao
		print("üé• Servi√ßo de C√¢mera iniciado. Zoom padr√£o:", camera.size)
	else:
		push_warning("Nenhuma c√¢mera foi atribu√≠da ao DialogCameraService.")
		set_physics_process(false)


## NOVO: Loop para seguir o jogador durante o gameplay.
func _physics_process(delta: float) -> void:
	# Se estivermos em di√°logo OU se n√£o houver um alvo de gameplay, esta fun√ß√£o para aqui.
	# √â aqui que o foco do di√°logo "sobrep√µe" o foco do gameplay.
	if is_in_dialogue or not is_instance_valid(gameplay_target):
		return

	# Se n√£o estivermos em di√°logo, a c√¢mera segue suavemente o jogador.
	var pos_alvo = calcular_posicao_foco(gameplay_target)
	camera.global_position = camera.global_position.lerp(pos_alvo, delta * gameplay_follow_speed)


# -------------------------------------------------
# PASSO 1 ‚Äî in√≠cio do di√°logo
# -------------------------------------------------
func iniciar_dialogo(personagem_alvo: Node3D) -> void:
	if not camera: return
	
	## NOVO: Avisa ao script que o di√°logo come√ßou, pausando o foco no jogador.
	is_in_dialogue = true
	
	print("üé¨ PASSO 1: Iniciando di√°logo com zoom e foco.")
	_iniciar_tween_foco_e_zoom(personagem_alvo, zoom_inicial, duracao_zoom_in)


# -------------------------------------------------
# PASSO 2 ‚Äî troca de falante (foco)
# -------------------------------------------------
func focar_personagem(novo_alvo: Node3D) -> void:
	if not camera or not novo_alvo: return
	
	print("üéØ PASSO 2: Trocando foco para:", novo_alvo.name)
	# O zoom atual √© mantido, apenas a posi√ß√£o √© alterada.
	_iniciar_tween_foco_e_zoom(novo_alvo, camera.size, velocidade_foco)


# -------------------------------------------------
# PASSO 3 ‚Äî fim do di√°logo (zoom out)
# -------------------------------------------------
func finalizar_dialogo() -> void:
	if not camera: return
	
	print("üèÅ PASSO 3: Finalizando di√°logo com zoom out.")
	
	if camera_tween and camera_tween.is_running():
		camera_tween.kill()
		
	camera_tween = create_tween()
	camera_tween.set_pause_mode(Tween.TWEEN_PAUSE_PROCESS)
	camera_tween.tween_property(camera, "size", zoom_padrao, duracao_zoom_out)\
		.set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
		
	camera_tween.finished.connect(func():
		dialogo_finalizado.emit()
		## NOVO: Avisa que o di√°logo acabou, devolvendo o controle da c√¢mera para o gameplay.
		is_in_dialogue = false
		print("‚úÖ C√¢mera retornou ao modo de gameplay.")
	)


# -------------------------------------------------
# Fun√ß√£o auxiliar combinada de foco e zoom
# -------------------------------------------------
func _iniciar_tween_foco_e_zoom(alvo: Node3D, novo_zoom: float, duracao: float) -> void:
	if camera_tween and camera_tween.is_running():
		camera_tween.kill()

	var pos_alvo := calcular_posicao_foco(alvo)
	camera_tween = create_tween()
	camera_tween.set_parallel()
	camera_tween.set_pause_mode(Tween.TWEEN_PAUSE_PROCESS)
	camera_tween.tween_property(camera, "global_position", pos_alvo, velocidade_foco)\
		.set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
	camera_tween.tween_property(camera, "size", novo_zoom, duracao)\
		.set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)


# -------------------------------------------------
# Fun√ß√£o utilit√°ria
# -------------------------------------------------
func calcular_posicao_foco(alvo: Node3D) -> Vector3:
	## ALTERADO: A trava do eixo Z foi removida.
	# A posi√ß√£o alvo √© simplesmente a posi√ß√£o do alvo + o offset completo (X, Y e Z).
	var pos_alvo := alvo.global_position + offset_camera
	return pos_alvo
